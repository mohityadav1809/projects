https://leetcode.com/problems/remove-nth-node-from-end-of-list/solutions/1164542/js-python-java-c-easy-two-pointer-solution-w-explanation/?orderBy=hot&languageTags=java
BFS :
Traversing through the ll and finding its size then again traversing and finding the specified position based on totalsize - reqpst + 1 and then going at that node and making its
previous node point to next node.
::Multiple O(n) loop we need to have



Best Approach O(n)
2 ptr approach
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head, slow = head;
        while (n-- > 0 ) {
fast = fast.next;
        }
        if (fast == null) return head.next;//Edge Case
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}


1pointer 2 iteration,
Take length by iteration then move 2nd iterator till length - desirednode + 1
